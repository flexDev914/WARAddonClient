package de.idrinth.waraddonclient.gui;

import de.idrinth.waraddonclient.service.Config;
import de.idrinth.waraddonclient.service.Backup;
import de.idrinth.waraddonclient.service.ProgressReporter;
import java.io.IOException;
import net.lingala.zip4j.exception.ZipException;
import de.idrinth.waraddonclient.service.logger.BaseLogger;
import java.awt.FileDialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.GroupLayout;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

public class Backups extends BaseFrame implements MainWindow
{
    private final BaseLogger logger;

    private final Backup backup;
    
    private final ProgressReporter reporter;
    
    private final MainWindowMap map;

    public Backups(MainWindowMap map, BaseLogger logger, Config config, Backup backup, ProgressReporter reporter) {
        super(config);
        this.map = map;
        this.logger = logger;
        this.backup = backup;
        this.reporter = reporter;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JMenuBar mainMenu = new JMenuBar();
        JMenu menuTools = new JMenu();
        JMenuItem menuCreateBackup = new JMenuItem();
        JMenuItem menuRestoreBackup = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        menuTools.setText("Tools");

        menuCreateBackup.setText("Create Backup");
        menuCreateBackup.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                menuCreateBackupActionPerformed(evt);
            }
        });
        menuTools.add(menuCreateBackup);

        menuRestoreBackup.setText("Restore Backup");
        menuRestoreBackup.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                menuRestoreBackupActionPerformed(evt);
            }
        });
        menuTools.add(menuRestoreBackup);

        mainMenu.add(menuTools);

        setJMenuBar(mainMenu);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 894, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 453, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuCreateBackupActionPerformed(ActionEvent evt) {//GEN-FIRST:event_menuCreateBackupActionPerformed
        reporter.start("Create Backup", () -> {
            this.setEnabled(true);
        });
        this.setEnabled(false);
        new Thread(() -> {
            try {
                backup.create(reporter);
                JOptionPane.showMessageDialog(this, "Saved your profile and addons in backups.");
            } catch (ZipException ex) {
                logger.error(ex);
                JOptionPane.showMessageDialog(this, "Failed to save your profile and addons.");
            }
            reporter.stop();
        }).start();
    }//GEN-LAST:event_menuCreateBackupActionPerformed

    private void menuRestoreBackupActionPerformed(ActionEvent evt) {//GEN-FIRST:event_menuRestoreBackupActionPerformed
        FileDialog dialog = new java.awt.FileDialog(this, "Select backup", java.awt.FileDialog.LOAD);
        dialog.setVisible(true);
        if (dialog.getFile() != null) {
            reporter.start("Restore Backup", () -> {
                this.setEnabled(true);
            });
            this.setEnabled(false);
            new Thread(() -> {
                if (!dialog.getFile().endsWith(".zip")) {
                    JOptionPane.showMessageDialog(this, "Backup has to be a zip-File.");
                    return;
                }
                try {
                    backup.restore(new java.io.File(dialog.getDirectory() + "/" + dialog.getFile()), reporter);
                    JOptionPane.showMessageDialog(this, "Backup restored.");
                } catch (IOException ex) {
                    logger.error(ex);
                    JOptionPane.showMessageDialog(this, "Couldn't restore Backup.");
                }
                reporter.stop();
            }).start();
        }
    }//GEN-LAST:event_menuRestoreBackupActionPerformed

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        map.exchange(MainWindowMap.BACKUPS, MainWindowMap.START);
    }//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
