package de.idrinth.waraddonclient.gui;

import de.idrinth.waraddonclient.service.Config;
import de.idrinth.waraddonclient.service.Restarter;
import de.idrinth.waraddonclient.service.logger.BaseLogger;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

public class Settings extends BaseFrame implements MainWindow
{    
    private final Config config;
    
    private final MainWindowMap map;
    
    private final Restarter restarter;
    
    private final BaseLogger logger;

    public Settings(MainWindowMap map, Config config, Restarter restarter, BaseLogger logger) {
        super(config);
        this.map = map;
        this.config = config;
        this.restarter = restarter;
        this.logger = logger;
        initComponents();
        setTitle("Settings");
        for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
            theme.addItem(info.getName());
        }
        theme.setSelectedItem(config.getTheme());
        autoClose.setSelectedItem(config.getAutoClose() + " seconds");
        switch(config.getLanguage()) {
            case "fr":
                language.setSelectedIndex(2);
                break;
            case "de":
                language.setSelectedIndex(1);
                break;
            case "en":
            default:
                language.setSelectedIndex(0);
                break;
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JLabel languageLabel = new JLabel();
        language = new JComboBox<>();
        JLabel languageExplanation = new JLabel();
        JLabel themeLabel = new JLabel();
        autoClose = new JComboBox<>();
        JLabel themeExplanation = new JLabel();
        JLabel autoCloseLabel = new JLabel();
        theme = new JComboBox<>();
        JLabel autoCloseExplanation = new JLabel();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        languageLabel.setText("Language");

        language.setModel(new DefaultComboBoxModel<>(new String[] { "English", "German", "French" }));
        language.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                languageActionPerformed(evt);
            }
        });

        languageExplanation.setText("This is the language that addon-descriptions will be in if avaible.");

        themeLabel.setText("Theme");

        autoClose.setModel(new DefaultComboBoxModel<>(new String[] { "0 seconds", "10 seconds", "60 seconds" }));
        autoClose.setSelectedIndex(2);
        autoClose.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autoCloseActionPerformed(evt);
            }
        });

        themeExplanation.setText("This defines the look of the program after a restart.");

        autoCloseLabel.setText("Auto Close");

        theme.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                themeActionPerformed(evt);
            }
        });

        autoCloseExplanation.setText("This defines how quickly the progress bar closes itself.");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(languageLabel)
                            .addComponent(themeLabel))
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(language, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(autoClose, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(theme, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE)))
                    .addComponent(autoCloseLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(themeExplanation)
                    .addComponent(languageExplanation)
                    .addComponent(autoCloseExplanation))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(languageLabel)
                    .addComponent(language, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(languageExplanation))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(themeLabel)
                    .addComponent(themeExplanation)
                    .addComponent(theme, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(autoCloseLabel)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(autoClose, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(autoCloseExplanation)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void languageActionPerformed(ActionEvent evt) {//GEN-FIRST:event_languageActionPerformed
        switch ((String) language.getSelectedItem()) {
            case "French":
                config.setLanguage("fr");
                break;
            case "German":
                config.setLanguage("de");
                break;
            case "English":
            default:
                config.setLanguage("en");
                break;
        }
    }//GEN-LAST:event_languageActionPerformed

    private void autoCloseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_autoCloseActionPerformed
        switch ((String) autoClose.getSelectedItem()) {
            case "60 seconds":
                config.setAutoClose(60);
                break;
            case "10 seconds":
                config.setAutoClose(10);
                break;
            case "0 seconds":
            default:
                config.setAutoClose(0);
                break;
        }
    }//GEN-LAST:event_autoCloseActionPerformed

    private void themeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_themeActionPerformed
        config.setTheme((String) theme.getSelectedItem());
    }//GEN-LAST:event_themeActionPerformed

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        map.exchange(MainWindowMap.SETTINGS, MainWindowMap.START);
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JComboBox<String> autoClose;
    private JComboBox<String> language;
    private JComboBox<String> theme;
    // End of variables declaration//GEN-END:variables
}
